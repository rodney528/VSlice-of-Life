import funkin.modding.module.Module;

import funkin.play.scoring.Scoring;
import funkin.play.PlayStatePlaylist;
import funkin.play.PlayState;

import funkin.ui.freeplay.FreeplayRank;
import funkin.ui.FullScreenScaleMode;
import funkin.ui.PixelatedIcon;

import funkin.Preferences;
import funkin.Highscore;

import flixel.FlxG;

class VSliceOfLifeHUD extends Module {
	public function new() {
		super('VSlice of Life HUD');
	}

	var rankSprite:FreeplayRank;
	function initRankSprite(pos:Array<Float>, scale:Float, zIndex:Int, camera):FreeplayRank {
		pos = pos ?? [0, 0];
		scale = scale ?? 2;
		var rank = new FreeplayRank(pos[0] ?? 0, pos[1] ?? 0);
		rank.scale.set(scale, scale);
		rank.cameras = [camera ?? FlxG.camera];
		rank.zIndex = zIndex ?? rank.zIndex;
		return rank;
	}
	var updateOnUpdate:Bool = false;
	function updateRank(?forceRank:String):Void {
		if (rankSprite != null) { // This doesn't wanna FUCKING WORK.
			var tallies = PlayStatePlaylist.isStoryMode ? Highscore.talliesLevel : Highscore.tallies;
			// TODO: Figure out what's going wrong.
			var newRank = forceRank ?? Scoring.calculateRank(
				{
					score: PlayStatePlaylist.isStoryMode ? PlayStatePlaylist.campaignScore + PlayState.instance.songScore : PlayState.instance.songScore,
					tallies:
					{
						sick: tallies.sick,
						good: tallies.good,
						bad: tallies.bad,
						shit: tallies.shit,
						missed: tallies.missed,
						combo: tallies.combo,
						maxCombo: tallies.maxCombo,
						totalNotesHit: tallies.totalNotes - tallies.missed, // tallies.totalNotesHit,
						totalNotes: tallies.totalNotes
					}
				}
			) ?? 'SHIT';
			if (rankSprite.rank != newRank) {
				rankSprite.rank = newRank;
				if (playerIcon != null)
					if (newRank == 'PERFECT' || newRank == 'PERFECT_GOLD') {
						if (playerIcon.animation.name == 'confirm' || playerIcon.animation.name == 'confirm-hold') {} else
							playerIcon.animation.play('confirm', true);
					} else {
						if (playerIcon.animation.name != 'idle')
							playerIcon.animation.play('idle', true);
					}
			}
		}
	}

	var playerIcon:PixelatedIcon;
	function initPlayerIcon(character:String, pos:Array<Float>, scale:Float, zIndex:Int, camera):PixelatedIcon {
		pos = pos ?? [0, 0];
		scale = scale ?? 2;
		var icon = new PixelatedIcon(pos[0] ?? 0, pos[1] ?? 0);
		icon.setCharacter(character);
		if (!icon.visible)
			icon.setCharacter('bf');
		icon.pixelPerfectRender = true;
		icon.pixelPerfectPosition = true;
		scale += 1;
		icon.scale.set(scale, scale);
		icon.cameras = [camera ?? FlxG.camera];
		icon.zIndex = zIndex ?? rank.zIndex;
		return icon;
	}

	override public function onUpdate(event):Void {
		super.onUpdate(event);
		if (updateOnUpdate && PlayState.instance != null)
			updateRank();
	}

	override public function onSongRetry(event):Void {
		super.onSongRetry(event);
		updateRank(PlayStatePlaylist.isStoryMode ? null : 'SHIT');
	}

	override public function onStateChangeEnd(event):Void {
		super.onStateChangeEnd(event);
		if (event.targetState != PlayState.instance) return;

		if (rankSprite == null) {
			PlayState.instance.add(rankSprite = initRankSprite([110, Preferences.downscroll ? 15 : FlxG.height - 130], 2, 860, PlayState.instance.camHUD));
			updateRank('SHIT');
			trace('made da rank');
		} else trace('didn\'t make da rank');
		if (playerIcon == null) {
			PlayState.instance.add(playerIcon = initPlayerIcon(PlayState.instance.currentStage.getBoyfriend().getHealthIconId(), [FlxG.width + 5, Preferences.downscroll ? 60 : FlxG.height - 90], 2.5, 860, PlayState.instance.camHUD));
			trace('made da icon');
		} else trace('didn\'t make da icon');

		PlayState.instance.refresh();
	}

	override public function onStateChangeBegin(event):Void {
		super.onStateChangeBegin(event);
		rankSprite = null;
		playerIcon = null;
	}

	override public function onNoteHit(event):Void {
		super.onNoteHit(event);
		if (!updateOnUpdate && PlayState.instance != null && event.note.noteData.getMustHitNote())
			updateRank();
	}
	override public function onNoteMiss(event):Void {
		super.onNoteMiss(event);
		if (!updateOnUpdate && PlayState.instance != null && event.note.noteData.getMustHitNote())
			updateRank();
	}
	override public function onNoteHoldDrop(event):Void {
		super.onNoteHoldDrop(event);
		if (!updateOnUpdate && PlayState.instance != null && event.holdNote.noteData.getMustHitNote())
			updateRank();
	}
}