import funkin.data.freeplay.style.FreeplayStyleRegistry;
import funkin.data.freeplay.player.PlayerRegistry;

import funkin.data.story.level.LevelRegistry;
import funkin.data.song.SongRegistry;

import funkin.modding.module.Module;

import funkin.ui.debug.charting.ChartEditorState;

import funkin.play.PlayStatePlaylist;
import funkin.play.PauseSubState;
import funkin.play.PlayState;

import funkin.audio.FunkinSound;

import funkin.ui.freeplay.FreeplaySongData;
import funkin.ui.freeplay.FreeplayState;
import funkin.ui.freeplay.SongMenuItem;
import funkin.ui.FullScreenScaleMode;

import funkin.util.Constants;

import flixel.tweens.FlxTween;
import flixel.tweens.FlxEase;

import flixel.util.FlxTimer;

class VSliceOfLifePauseMenu extends Module {
	public function new():Void {
		super('VSlice of Life Pause Menu');
	}

	var capsule:SongMenuItem;
	var capsulePosition:Array<Float> = [-50, 10];
	function initCapsule():SongMenuItem {
		var song:SongMenuItem = new SongMenuItem(capsulePosition[0], capsulePosition[1]);
		song.targetPos.set(song.x, song.y);
		var fetchPlayableCharacter = () -> {
			var result = PlayerRegistry.instance.fetchEntry(FreeplayState.rememberedCharacterId);
			if (result == null)
				result = PlayerRegistry.instance.fetchEntry(Constants.DEFAULT_CHARACTER);
			return result;
		}
		var levelData = LevelRegistry.instance.fetchEntry(PlayStatePlaylist.campaignId);
		song.initData(levelData == null ? null : new FreeplaySongData(PlayState.instance.currentSong.id, levelData), FreeplayStyleRegistry.instance.fetchEntry(fetchPlayableCharacter().getFreeplayStyleID()));
		song.forcePosition();
		song.checkClip();
		song.x -= 100000;
		song.selected = true;
		song.newText.visible = false;
		return song;
	}

	var subState;
	override public function onUpdate(event):Void {
		super.onUpdate(event);
		if (capsule != null) {
			if (capsule.doJumpIn)
				capsule.targetPos.set(capsulePosition[0], capsulePosition[1]);
			if (subState.controls.FREEPLAY_FAVORITE && subState.allowInput) {
				if (capsule.freeplayData.toggleFavorite()) {
					capsule.favIcon.visible = true;
					capsule.favIconBlurred.visible = true;
					capsule.favIcon.animation.play('fav');
					capsule.favIconBlurred.animation.play('fav');
					FunkinSound.playOnce(Paths.sound('fav'), 1);
					capsule.checkClip();
					capsule.selected = true; // set selected again, so it can run its getter function to initialize movement
					subState.allowInput = false;

					capsule.doLerp = false;
					FlxTween.tween(capsule, {y: capsule.y - 5}, 0.1, {ease: FlxEase.expoOut});

					FlxTween.tween(capsule, {y: capsule.y + 5}, 0.1,
					{
						ease: FlxEase.expoIn,
						startDelay: 0.1,
						onComplete: function(_) {
							capsule.doLerp = true;
							subState.allowInput = true;
						}
					});
				} else {
					capsule.favIcon.animation.play('fav', true, true, 9);
					capsule.favIconBlurred.animation.play('fav', true, true, 9);
					FunkinSound.playOnce(Paths.sound('unfav'), 1);
					new FlxTimer().start(0.2, _ -> {
						capsule.favIcon.visible = false;
						capsule.favIconBlurred.visible = false;
						capsule.checkClip();
						capsule.selected = true; // set selected again, so it can run its getter function to initialize movement
					});

					subState.allowInput = false;
					capsule.doLerp = false;
					FlxTween.tween(capsule, {y: capsule.y + 5}, 0.1, {ease: FlxEase.expoOut});
					FlxTween.tween(capsule, {y: capsule.y - 5}, 0.1,
					{
						ease: FlxEase.expoIn,
						startDelay: 0.1,
						onComplete: function(_) {
							capsule.doLerp = true;
							subState.allowInput = true;
						}
					});
				}
			}
		}
	}

	public function onSubStateOpenEnd(event):Void {
		super.onSubStateOpenEnd(event);
		if (!(event.targetState is PauseSubState)) return;
		subState = event.targetState;
		var retryCount:Int = 0;
		function _makeDaFuckinCapsuleDammit():Void {
			try {
				subState.add(capsule = initCapsule());
				trace('made da capsule' + (retryCount < 1 ? '' : ' after ' + retryCount + ' attempts'));
			} catch(e:Dynamic) {
				retryCount++;
				trace('didn\'t make da capsule, trying again');
				if (retryCount < 1000) _makeDaFuckinCapsuleDammit();
				else trace('didn\'t make da capsule... somehow???');
			}
		}
		_makeDaFuckinCapsuleDammit();
	}

	public function onSubStateCloseEnd(event):Void {
		super.onSubStateCloseEnd(event);
		if (!(event.targetState is PauseSubState)) return;
		if (capsule != null) {
			if (capsule.songText != null) {
				if (capsule.songText.moveTimer != null)
					capsule.songText.moveTimer.cancel();
				if (capsule.songText.moveTween != null)
					capsule.songText.moveTween.cancel();
			}
			if (capsule.sparkleTimer != null)
				capsule.sparkleTimer.cancel();
		}
		capsule = null;
		subState = null;
	}
}